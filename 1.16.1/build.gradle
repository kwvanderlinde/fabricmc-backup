plugins {
    id 'fabric-loom' version '0.5.22'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// TODO Rename the `archives_base_name property to `mod_id` or something os it makes more sense to use in `fabric.mod.json` as well.
archivesBaseName = "${project.archives_base_name}-${project.minecraft_version}"
version = project.mod_version
group = project.maven_group

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"

    // Make sure our library dependencies are contained in our JAR.
    include "me.shedaniel.cloth:config-2:${project.cloth_config_2_version}"
    modApi("me.shedaniel.cloth:config-2:${project.cloth_config_2_version}") {
        /*
         * Cloth config formally depends on an old version of fabric API that still includes fabric-biomes-v1. However,
         * by the time of the full 1.16.2 fabric release, this has been removed and now causes mixin failures. This is
         * why we've taken the heavy handed approach of excluding the dependency.
         */
        exclude group: 'net.fabricmc.fabric-api', module: 'fabric-api'
    }

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    implementation project(':common')
    include project(':common')
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "mod_id": project.archives_base_name,
                "mod_name": project.mod_name,
                "mod_description": project.mod_description,
                "version": project.version,
                "minecraft_version_underscores": project.minecraft_version.replaceAll('\\.', '_'),
                "minecraft_version": project.minecraft_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "$rootDir/LICENSE"
    from ("$rootDir/assets")  {
        into "assets"
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
